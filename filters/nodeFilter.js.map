{"version":3,"sources":["../src/filters/nodeFilter.js"],"names":[],"mappings":";;;;;;kBAuBwB,cAAc;;;;;;;;;;;;;;;;AAnB/B,IAAM,gBAAgB,WAAhB,gBAAgB,GAAG,CAC5B,SAAS,EACT,oBAAoB,EACpB,cAAc,EACd,yBAAyB,EACzB,YAAY,EACZ,uBAAuB,EACvB,yBAAyB,EACzB,oCAAoC,EACpC,OAAO,EACP,kBAAkB,EAClB,oBAAoB,EACpB,+BAA+B,CAClC,CAAA;;AAED,SAAS,UAAU,CAAC,GAAG,EAAE,OAAO,EAAE;AAC9B,WAAO,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;CACjD;;AAEc,SAAS,cAAc,OAMnC;6BALC,QAAQ;QAAR,QAAQ,iCAAG,MAAM;6BACjB,QAAQ;QAAR,QAAQ,iCAAG,aAAG,QAAQ,EAAE;iCACxB,YAAY;QAAZ,YAAY,qCAAG,GAAG;wBAClB,GAAG;QAAH,GAAG,4BAAG,OAAO,CAAC,GAAG,CAAC,QAAQ;8BAC1B,SAAS;QAAT,SAAS,kCAAG,gBAAgB;;AAE5B,QAAM,cAAc,GAAG,SAAS,CAAC,GAAG,CAAC,UAAA,QAAQ;eAAI,sBAAO,QAAQ,EAAE;AAC9D,oBAAQ,EAAR,QAAQ;AACR,sBAAU,EAAE,GAAG;AACf,oBAAQ,EAAR,QAAQ;SACX,CAAC;KAAA,CAAC,CAAA;;AAEH,aAAS,SAAS,CAAC,OAAO,EAAE;AACxB,eAAO,UAAU,CAAC,eAAK,QAAQ,CAAC,OAAO,EAAE,eAAK,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,YAAY,CAAC,CAAA;KACjF;;AAED,WAAO,SAAS,UAAU,CAAC,QAAQ,EAAE;AACjC,eAAO,cAAc,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,QAAQ;mBACvC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,OAAO;uBAC9B,SAAS,CAAC,OAAO,CAAC,KAAK,QAAQ;aAAA,CAAC,CACnC;SAAA,EACH,EAAE,CAAC,CAAA;KACR,CAAA;CACJ","file":"nodeFilter.js","sourcesContent":["import path from 'path'\nimport os from 'os'\nimport strMap from '../utils/strMap'\n\nexport const defaultTemplates = [\n    'default',\n    'default-{instance}',\n    '{deployment}',\n    '{deployment}-{instance}',\n    '{hostname}',\n    '{hostname}-{instance}',\n    '{hostname}-{deployment}',\n    '{hostname}-{deployment}-{instance}',\n    'local',\n    'local-{instance}',\n    'local-{deployment}',\n    'local-{deployment}-{instance}'\n]\n\nfunction subStrFrom(str, fromStr) {\n    return str.substring(str.indexOf(fromStr) + 1)\n}\n\nexport default function makeNodeFilter({\n    instance = 'main',\n    hostname = os.hostname(),\n    tagSeparator = '#',\n    env = process.env.NODE_ENV,\n    templates = defaultTemplates\n}) {\n    const filesTemplates = templates.map(template => strMap(template, {\n        hostname,\n        deployment: env,\n        instance\n    }))\n\n    function normalize(relFile) {\n        return subStrFrom(path.basename(relFile, path.extname(relFile)), tagSeparator)\n    }\n\n    return function nodeFilter(relFiles) {\n        return filesTemplates.reduce((acc, template) =>\n            acc.concat(relFiles.filter(relFile =>\n                normalize(relFile) === template)\n            )\n        , [])\n    }\n}\n"]}