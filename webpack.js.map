{"version":3,"sources":["src/webpack.js"],"names":[],"mappings":";;;;;;;kBAWwB,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFrC,IAAM,KAAK,GAAG,qBAAQ,wCAAwC,CAAC,CAAA;;AAEhD,SAAS,aAAa,CAAC,MAAM,EAAE;;;AAC1C,QAAI,IAAI,CAAC,SAAS,EAAE;AAChB,YAAI,CAAC,SAAS,EAAE,CAAA;KACnB;AACD,QAAM,EAAE,GAAG,eAAK,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;AAC1C,QAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAA;AACvB,QAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;AACjC,QAAM,KAAK,GAAG,sBAAY,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;AACtD,QAAM,IAAI;AACN,aAAK,EAAE,IAAI;OACR,MAAM,EACN,KAAK,EACL,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,EAAE,CACrC,CAAA;;AAED,QAAM,YAAY,gBACX,OAAO,CAAC,GAAG;AACd,YAAI,EAAE,wBAAG,EAAE,CAAC;AACZ,eAAO,EAAE,EAAE;AACX,WAAG,EAAE,OAAO,CAAC,GAAG,EAAE;MACrB,CAAA;;AAED,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,IAAI;eAAI,sBAAO,IAAI,EAAE,YAAY,CAAC;KAAA,CAAC,CAAA;AAC7D,SAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;;AAEjB,QAAI,CAAC,EAAE,EAAE;AACL,cAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAA;KACjE;;AAED,4BAAS,IAAI,CAAC,CACT,IAAI,CAAC,UAAA,KAAK,EAAI;AACX,aAAK,CAAC,OAAO,CAAC,UAAA,IAAI;mBAAI,MAAK,aAAa,CAAC,IAAI,CAAC;SAAA,CAAC,CAAA;AAC/C,eAAO,oBAAK,KAAK,CAAC,CAAA;KACrB,CAAC,CACD,IAAI,CAAC,UAAA,KAAK,EAAI;AACX,cAAK,KAAK,GAAG,CAAC,KAAK,CAAC,CAAA;AACpB,UAAE,CAAC,IAAI,EAAE,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAA;KAC/E,CAAC,CACD,KAAK,CAAC,UAAA,GAAG;eAAI,EAAE,CAAC,GAAG,CAAC;KAAA,CAAC,CAAA;CAC7B","file":"webpack.js","sourcesContent":["import loaderUtils from 'loader-utils'\nimport path from 'path'\nimport __debug from 'debug'\nimport fr from 'find-root'\n\nimport strMap from './utils/strMap'\nimport getFiles from './common/getFiles'\nimport scan from './common/scan'\n\nconst debug = __debug('node-config-loader:webpackLoader:debug')\n\nexport default function webpackLoader(source) {\n    if (this.cacheable) {\n        this.cacheable()\n    }\n    const rp = path.dirname(this.resourcePath)\n    const cb = this.async()\n    const params = JSON.parse(source)\n    const query = loaderUtils.parseQuery(this.query) || {}\n    const opts = {\n        nodir: true,\n        ...params,\n        ...query,\n        ...this.options.configLoader || {}\n    }\n\n    const templateArgs = {\n        ...process.env,\n        ROOT: fr(rp),\n        DIRNAME: rp,\n        PWD: process.cwd()\n    }\n\n    opts.mask = opts.mask.map(mask => strMap(mask, templateArgs))\n    debug('%o', opts)\n\n    if (!cb) {\n        throw new Error('node-config-loader can\\'t support sync mode')\n    }\n\n    getFiles(opts)\n        .then(files => {\n            files.forEach(file => this.addDependency(file))\n            return scan(files)\n        })\n        .then(value => {\n            this.value = [value]\n            cb(null, 'module.exports = ' + JSON.stringify(value, undefined, '\\t') + ';')\n        })\n        .catch(err => cb(err))\n}\n"]}