{"version":3,"sources":["../src/utils/nodePromisify.js"],"names":[],"mappings":";;;;;kBAEwB,aAAa;AAFrC,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAA;;AAEpB,SAAS,aAAa,CAAC,EAAE,EAAe;QAAb,IAAI,yDAAG,IAAI;;AACjD,WAAO,SAAS,QAAQ,GAAG;AACvB,YAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;AAClC,eAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,qBAAS,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE;AACnB,oBAAI,GAAG,EAAE;AACL,0BAAM,CAAC,GAAG,CAAC,CAAA;iBACd,MAAM;AACH,2BAAO,CAAC,IAAI,CAAC,CAAA;iBAChB;aACJ;AACD,cAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;SACpC,CAAC,CAAA;KACL,CAAA;CACJ","file":"nodePromisify.js","sourcesContent":["const slice = Array.prototype.slice\n\nexport default function nodePromisify(fn, self = null) {\n    return function promised() {\n        const args = slice.call(arguments)\n        return new Promise((resolve, reject) => {\n            function cb(err, data) {\n                if (err) {\n                    reject(err)\n                } else {\n                    resolve(data)\n                }\n            }\n            fn.apply(self, args.concat([cb]))\n        })\n    }\n}\n"]}