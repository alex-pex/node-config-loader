{"version":3,"sources":["../src/parsers/strategyParser.js"],"names":[],"mappings":";;;;;kBAMwB,kBAAkB;;;;;;;;;;;;AAA3B,SAAS,kBAAkB,GAAgB;QAAf,QAAQ,yDAAG,EAAE;;AACpD,WAAO,SAAS,cAAc,CAAC,IAAI,EAAE;AACjC,YAAM,GAAG,GAAG,eAAK,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;;AAEhD,eAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,gBAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;AAChB,sBAAM,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,mCAAmC,GAAG,GAAG,CAAC,CAAC,CAAA;aAC3E,MAAM;AACH,uBAAO,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;aACtC;SACJ,CAAC,CAAA;KACL,CAAA;CACJ","file":"strategyParser.js","sourcesContent":["import path from 'path'\n\n/**\n * StrategyAdapter\n * @param {Adapter[file_extension]} adapters\n */\nexport default function makeStrategyParser(adapters = {}) {\n    return function strategyParser(file) {\n        const ext = path.extname(file.path).substring(1)\n\n        return new Promise((resolve, reject) => {\n            if (!adapters[ext]) {\n                reject(new Error(file.path + ': adapter not found for file ext ' + ext))\n            } else {\n                return resolve(adapters[ext](file))\n            }\n        })\n    }\n}\n"]}