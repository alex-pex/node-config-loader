{"version":3,"sources":["../src/parsers/tomlParser.js"],"names":[],"mappings":";;;;;kBAMwB,cAAc;;;;;;;AAAvB,SAAS,cAAc,CAAC,IAAI,EAAE;AACzC,WAAO,SAAS,UAAU,CAAC,IAAI,EAAE;AAC7B,eAAO,IAAI,OAAO,CAAC,UAAA,OAAO,EAAI;AAC1B,mBAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;SAChD,CAAC,CACD,KAAK,CAAC,UAAA,CAAC,EAAI;AACR,aAAC,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,SAAS,GAAG,CAAC,CAAC,IAAI,GAAG,WAAW,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC,OAAO,CAAA;AACtF,kBAAM,CAAC,CAAA;SACV,CAAC,CAAA;KACL,CAAA;CACJ","file":"tomlParser.js","sourcesContent":["/**\n * BinaryMuse toml adapter\n *\n * @see  https://github.com/BinaryMuse/toml-node\n * @param  {Toml} Toml toml parser\n */\nexport default function makeTomlParser(Toml) {\n    return function tomlParser(file) {\n        return new Promise(resolve => {\n            resolve(Toml.parse(file.contents.toString()))\n        })\n        .catch(e => {\n            e.message = file.path + ', line ' + e.line + ', column ' + e.column + ': ' + e.message\n            throw e\n        })\n    }\n}\n"]}